// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace natashapb {
class SymbolLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolLine>
      _instance;
} _SymbolLine_default_instance_;
class SymbolBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolBlock>
      _instance;
} _SymbolBlock_default_instance_;
class SymbolBlock3X5DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolBlock3X5>
      _instance;
} _SymbolBlock3X5_default_instance_;
class RandomResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RandomResult>
      _instance;
} _RandomResult_default_instance_;
class StaticCascadingRandomResult3X5DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticCascadingRandomResult3X5>
      _instance;
} _StaticCascadingRandomResult3X5_default_instance_;
class Position2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position2D>
      _instance;
} _Position2D_default_instance_;
class GameResultInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameResultInfo>
      _instance;
} _GameResultInfo_default_instance_;
class SpinResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpinResult>
      _instance;
} _SpinResult_default_instance_;
class GameCtrlIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCtrlID>
      _instance;
} _GameCtrlID_default_instance_;
class BaseCascadingInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BaseCascadingInfo>
      _instance;
} _BaseCascadingInfo_default_instance_;
class BaseFreeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BaseFreeInfo>
      _instance;
} _BaseFreeInfo_default_instance_;
class RespinHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespinHistory>
      _instance;
} _RespinHistory_default_instance_;
class RespinHistoryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespinHistoryList>
      _instance;
} _RespinHistoryList_default_instance_;
class UserGameModInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserGameModInfo>
      _instance;
} _UserGameModInfo_default_instance_;
class UserGameLogicInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserGameLogicInfo>
      _instance;
} _UserGameLogicInfo_default_instance_;
}  // namespace natashapb
namespace protobuf_base_2eproto {
void InitDefaultsSymbolLineImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_SymbolLine_default_instance_;
    new (ptr) ::natashapb::SymbolLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::SymbolLine::InitAsDefaultInstance();
}

void InitDefaultsSymbolLine() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSymbolLineImpl);
}

void InitDefaultsSymbolBlockImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsSymbolLine();
  {
    void* ptr = &::natashapb::_SymbolBlock_default_instance_;
    new (ptr) ::natashapb::SymbolBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::SymbolBlock::InitAsDefaultInstance();
}

void InitDefaultsSymbolBlock() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSymbolBlockImpl);
}

void InitDefaultsSymbolBlock3X5Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_SymbolBlock3X5_default_instance_;
    new (ptr) ::natashapb::SymbolBlock3X5();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::SymbolBlock3X5::InitAsDefaultInstance();
}

void InitDefaultsSymbolBlock3X5() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSymbolBlock3X5Impl);
}

void InitDefaultsRandomResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_RandomResult_default_instance_;
    new (ptr) ::natashapb::RandomResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::RandomResult::InitAsDefaultInstance();
}

void InitDefaultsRandomResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRandomResultImpl);
}

void InitDefaultsStaticCascadingRandomResult3X5Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsSymbolBlock3X5();
  {
    void* ptr = &::natashapb::_StaticCascadingRandomResult3X5_default_instance_;
    new (ptr) ::natashapb::StaticCascadingRandomResult3X5();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::StaticCascadingRandomResult3X5::InitAsDefaultInstance();
}

void InitDefaultsStaticCascadingRandomResult3X5() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStaticCascadingRandomResult3X5Impl);
}

void InitDefaultsPosition2DImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_Position2D_default_instance_;
    new (ptr) ::natashapb::Position2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::Position2D::InitAsDefaultInstance();
}

void InitDefaultsPosition2D() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPosition2DImpl);
}

void InitDefaultsGameResultInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsPosition2D();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_GameResultInfo_default_instance_;
    new (ptr) ::natashapb::GameResultInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameResultInfo::InitAsDefaultInstance();
}

void InitDefaultsGameResultInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameResultInfoImpl);
}

void InitDefaultsSpinResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsGameResultInfo();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_SpinResult_default_instance_;
    new (ptr) ::natashapb::SpinResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::SpinResult::InitAsDefaultInstance();
}

void InitDefaultsSpinResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpinResultImpl);
}

void InitDefaultsGameCtrlIDImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_GameCtrlID_default_instance_;
    new (ptr) ::natashapb::GameCtrlID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameCtrlID::InitAsDefaultInstance();
}

void InitDefaultsGameCtrlID() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCtrlIDImpl);
}

void InitDefaultsBaseCascadingInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_BaseCascadingInfo_default_instance_;
    new (ptr) ::natashapb::BaseCascadingInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::BaseCascadingInfo::InitAsDefaultInstance();
}

void InitDefaultsBaseCascadingInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBaseCascadingInfoImpl);
}

void InitDefaultsBaseFreeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_BaseFreeInfo_default_instance_;
    new (ptr) ::natashapb::BaseFreeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::BaseFreeInfo::InitAsDefaultInstance();
}

void InitDefaultsBaseFreeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBaseFreeInfoImpl);
}

void InitDefaultsRespinHistoryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_RespinHistory_default_instance_;
    new (ptr) ::natashapb::RespinHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::RespinHistory::InitAsDefaultInstance();
}

void InitDefaultsRespinHistory() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRespinHistoryImpl);
}

void InitDefaultsRespinHistoryListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsRespinHistory();
  {
    void* ptr = &::natashapb::_RespinHistoryList_default_instance_;
    new (ptr) ::natashapb::RespinHistoryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::RespinHistoryList::InitAsDefaultInstance();
}

void InitDefaultsRespinHistoryList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRespinHistoryListImpl);
}

void InitDefaultsUserGameModInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsRandomResult();
  protobuf_base_2eproto::InitDefaultsSpinResult();
  protobuf_base_2eproto::InitDefaultsGameCtrlID();
  protobuf_base_2eproto::InitDefaultsBaseCascadingInfo();
  protobuf_base_2eproto::InitDefaultsRespinHistoryList();
  protobuf_base_2eproto::InitDefaultsBaseFreeInfo();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_UserGameModInfo_default_instance_;
    new (ptr) ::natashapb::UserGameModInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::UserGameModInfo::InitAsDefaultInstance();
}

void InitDefaultsUserGameModInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserGameModInfoImpl);
}

void InitDefaultsUserGameLogicInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsUserGameModInfo();
  {
    void* ptr = &::natashapb::_UserGameLogicInfo_default_instance_;
    new (ptr) ::natashapb::UserGameLogicInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::UserGameLogicInfo::InitAsDefaultInstance();
}

void InitDefaultsUserGameLogicInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserGameLogicInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolLine, xdat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock, ydat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat0_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat0_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat0_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat0_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat0_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat1_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat1_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat1_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat1_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat1_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat2_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat2_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat2_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat2_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat2_4_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RandomResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RandomResult, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingRandomResult3X5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingRandomResult3X5, reelsindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingRandomResult3X5, downnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingRandomResult3X5, sb3x5_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::Position2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::Position2D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::Position2D, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, typegameresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, lstpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, lstsymbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, realwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, mul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, prize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, exdat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, realwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, lstgri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, fgnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, infg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, inbonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, injackpot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, incommonjackpot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, inrespin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, exdat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlID, ctrlid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlID, baseid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlID, parentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlID, gamemod_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, curbet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, curlines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, curtimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, turnnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, turnwin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, totalwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, lastnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, curnums_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistory, realwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistory, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistory, mul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistory, isspecial_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistoryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistoryList, lst_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, randomresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, spinresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, gamectrlid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, cascadinginfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, lsthistory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, freeinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, exdat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, basegame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, freegame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, jackpot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, commonjackpot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, freegame2_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::natashapb::SymbolLine)},
  { 6, -1, sizeof(::natashapb::SymbolBlock)},
  { 12, -1, sizeof(::natashapb::SymbolBlock3X5)},
  { 32, -1, sizeof(::natashapb::RandomResult)},
  { 38, -1, sizeof(::natashapb::StaticCascadingRandomResult3X5)},
  { 46, -1, sizeof(::natashapb::Position2D)},
  { 53, -1, sizeof(::natashapb::GameResultInfo)},
  { 67, -1, sizeof(::natashapb::SpinResult)},
  { 82, -1, sizeof(::natashapb::GameCtrlID)},
  { 91, -1, sizeof(::natashapb::BaseCascadingInfo)},
  { 101, -1, sizeof(::natashapb::BaseFreeInfo)},
  { 109, -1, sizeof(::natashapb::RespinHistory)},
  { 118, -1, sizeof(::natashapb::RespinHistoryList)},
  { 124, -1, sizeof(::natashapb::UserGameModInfo)},
  { 136, -1, sizeof(::natashapb::UserGameLogicInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_SymbolLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_SymbolBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_SymbolBlock3X5_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_RandomResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_StaticCascadingRandomResult3X5_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_Position2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameResultInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_SpinResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameCtrlID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_BaseCascadingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_BaseFreeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_RespinHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_RespinHistoryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_UserGameModInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_UserGameLogicInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "base.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nbase.proto\022\tnatashapb\032\031google/protobuf"
      "/any.proto\"\032\n\nSymbolLine\022\014\n\004xDat\030\001 \003(\005\"2"
      "\n\013SymbolBlock\022#\n\004yDat\030\001 \003(\0132\025.natashapb."
      "SymbolLine\"\200\002\n\016SymbolBlock3X5\022\016\n\006dat0_0\030"
      "\001 \001(\005\022\016\n\006dat0_1\030\002 \001(\005\022\016\n\006dat0_2\030\003 \001(\005\022\016\n"
      "\006dat0_3\030\004 \001(\005\022\016\n\006dat0_4\030\005 \001(\005\022\016\n\006dat1_0\030"
      "\006 \001(\005\022\016\n\006dat1_1\030\007 \001(\005\022\016\n\006dat1_2\030\010 \001(\005\022\016\n"
      "\006dat1_3\030\t \001(\005\022\016\n\006dat1_4\030\n \001(\005\022\016\n\006dat2_0\030"
      "\013 \001(\005\022\016\n\006dat2_1\030\014 \001(\005\022\016\n\006dat2_2\030\r \001(\005\022\016\n"
      "\006dat2_3\030\016 \001(\005\022\016\n\006dat2_4\030\017 \001(\005\"2\n\014RandomR"
      "esult\022\"\n\004info\030d \001(\0132\024.google.protobuf.An"
      "y\"p\n\036StaticCascadingRandomResult3X5\022\022\n\nr"
      "eelsIndex\030\001 \001(\005\022\020\n\010downNums\030\002 \001(\005\022(\n\005sb3"
      "x5\030\003 \001(\0132\031.natashapb.SymbolBlock3X5\"\"\n\nP"
      "osition2D\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"\355\001\n\016Game"
      "ResultInfo\0221\n\016typeGameResult\030\001 \001(\0162\031.nat"
      "ashapb.GAMERESULTTYPE\022%\n\006lstPos\030\002 \003(\0132\025."
      "natashapb.Position2D\022\016\n\006symbol\030\003 \001(\005\022\021\n\t"
      "lstSymbol\030\004 \003(\005\022\013\n\003win\030\005 \001(\003\022\017\n\007realWin\030"
      "\006 \001(\003\022\013\n\003mul\030\007 \001(\003\022\r\n\005prize\030\010 \001(\003\022$\n\005exD"
      "at\030\350\007 \001(\0132\024.google.protobuf.Any\"\350\001\n\nSpin"
      "Result\022\013\n\003win\030\001 \001(\003\022\017\n\007realWin\030\002 \001(\003\022)\n\006"
      "lstGRI\030\003 \003(\0132\031.natashapb.GameResultInfo\022"
      "\016\n\006fgNums\030\004 \001(\005\022\014\n\004inFG\030\005 \001(\010\022\017\n\007inBonus"
      "\030\006 \001(\010\022\021\n\tinJackpot\030\007 \001(\010\022\027\n\017inCommonJac"
      "kpot\030\010 \001(\010\022\020\n\010inRespin\030\t \001(\010\022$\n\005exDat\030\350\007"
      " \001(\0132\024.google.protobuf.Any\"g\n\nGameCtrlID"
      "\022\016\n\006ctrlID\030\001 \001(\003\022\016\n\006baseID\030\002 \001(\003\022\020\n\010pare"
      "ntID\030\003 \001(\003\022\'\n\007gameMod\030\004 \001(\0162\026.natashapb."
      "GAMEMODTYPE\"j\n\021BaseCascadingInfo\022\016\n\006curB"
      "et\030\001 \001(\005\022\020\n\010curLines\030\002 \001(\005\022\020\n\010curTimes\030\003"
      " \001(\005\022\020\n\010turnNums\030\004 \001(\005\022\017\n\007turnWin\030\005 \001(\003\""
      "C\n\014BaseFreeInfo\022\020\n\010totalWin\030\001 \001(\003\022\020\n\010las"
      "tNums\030\002 \001(\005\022\017\n\007curNums\030\003 \001(\005\"M\n\rRespinHi"
      "story\022\017\n\007realWin\030\001 \001(\003\022\013\n\003win\030\002 \001(\003\022\013\n\003m"
      "ul\030\003 \001(\005\022\021\n\tisSpecial\030\004 \001(\010\":\n\021RespinHis"
      "toryList\022%\n\003lst\030\001 \003(\0132\030.natashapb.Respin"
      "History\"\316\002\n\017UserGameModInfo\022-\n\014randomRes"
      "ult\030\001 \001(\0132\027.natashapb.RandomResult\022)\n\nsp"
      "inResult\030\002 \001(\0132\025.natashapb.SpinResult\022)\n"
      "\ngameCtrlID\030\003 \001(\0132\025.natashapb.GameCtrlID"
      "\0223\n\rcascadingInfo\030\004 \001(\0132\034.natashapb.Base"
      "CascadingInfo\0220\n\nlstHistory\030\005 \001(\0132\034.nata"
      "shapb.RespinHistoryList\022)\n\010freeInfo\030\006 \001("
      "\0132\027.natashapb.BaseFreeInfo\022$\n\005exDat\030\350\007 \001"
      "(\0132\024.google.protobuf.Any\"\251\002\n\021UserGameLog"
      "icInfo\022,\n\010basegame\030\001 \001(\0132\032.natashapb.Use"
      "rGameModInfo\022,\n\010freegame\030\002 \001(\0132\032.natasha"
      "pb.UserGameModInfo\022)\n\005bonus\030\003 \001(\0132\032.nata"
      "shapb.UserGameModInfo\022+\n\007jackpot\030\004 \001(\0132\032"
      ".natashapb.UserGameModInfo\0221\n\rcommonjack"
      "pot\030\005 \001(\0132\032.natashapb.UserGameModInfo\022-\n"
      "\tfreegame2\030\006 \001(\0132\032.natashapb.UserGameMod"
      "Info*`\n\016GAMERESULTTYPE\022\n\n\006NO_WIN\020\000\022\r\n\tLI"
      "NE_LEFT\020\001\022\016\n\nLINE_RIGHT\020\002\022\020\n\014SCATTER_LEF"
      "T\020\003\022\021\n\rSCATTER_RIGHT\020\004*\204\001\n\013GAMEMODTYPE\022\014"
      "\n\010NULL_MOD\020\000\022\r\n\tBASE_GAME\020\001\022\r\n\tFREE_GAME"
      "\020\002\022\016\n\nBONUS_GAME\020\003\022\020\n\014JACKPOT_GAME\020\004\022\027\n\023"
      "COMMON_JACKPOT_GAME\020\005\022\016\n\nFREE_GAME2\020\006b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_base_2eproto
namespace natashapb {
const ::google::protobuf::EnumDescriptor* GAMERESULTTYPE_descriptor() {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_2eproto::file_level_enum_descriptors[0];
}
bool GAMERESULTTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GAMEMODTYPE_descriptor() {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_2eproto::file_level_enum_descriptors[1];
}
bool GAMEMODTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SymbolLine::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolLine::kXDatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolLine::SymbolLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsSymbolLine();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.SymbolLine)
}
SymbolLine::SymbolLine(const SymbolLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      xdat_(from.xdat_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:natashapb.SymbolLine)
}

void SymbolLine::SharedCtor() {
  _cached_size_ = 0;
}

SymbolLine::~SymbolLine() {
  // @@protoc_insertion_point(destructor:natashapb.SymbolLine)
  SharedDtor();
}

void SymbolLine::SharedDtor() {
}

void SymbolLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolLine::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolLine& SymbolLine::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsSymbolLine();
  return *internal_default_instance();
}


void SymbolLine::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.SymbolLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xdat_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.SymbolLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 xDat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_xdat())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_xdat())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.SymbolLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.SymbolLine)
  return false;
#undef DO_
}

void SymbolLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.SymbolLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 xDat = 1;
  if (this->xdat_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _xdat_cached_byte_size_));
  }
  for (int i = 0, n = this->xdat_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->xdat(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.SymbolLine)
}

::google::protobuf::uint8* SymbolLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.SymbolLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 xDat = 1;
  if (this->xdat_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _xdat_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->xdat_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.SymbolLine)
  return target;
}

size_t SymbolLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.SymbolLine)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 xDat = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->xdat_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _xdat_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.SymbolLine)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.SymbolLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.SymbolLine)
    MergeFrom(*source);
  }
}

void SymbolLine::MergeFrom(const SymbolLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.SymbolLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xdat_.MergeFrom(from.xdat_);
}

void SymbolLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.SymbolLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolLine::CopyFrom(const SymbolLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.SymbolLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolLine::IsInitialized() const {
  return true;
}

void SymbolLine::Swap(SymbolLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolLine::InternalSwap(SymbolLine* other) {
  using std::swap;
  xdat_.InternalSwap(&other->xdat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolLine::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolBlock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolBlock::kYDatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolBlock::SymbolBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsSymbolBlock();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.SymbolBlock)
}
SymbolBlock::SymbolBlock(const SymbolBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ydat_(from.ydat_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:natashapb.SymbolBlock)
}

void SymbolBlock::SharedCtor() {
  _cached_size_ = 0;
}

SymbolBlock::~SymbolBlock() {
  // @@protoc_insertion_point(destructor:natashapb.SymbolBlock)
  SharedDtor();
}

void SymbolBlock::SharedDtor() {
}

void SymbolBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolBlock::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolBlock& SymbolBlock::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsSymbolBlock();
  return *internal_default_instance();
}


void SymbolBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.SymbolBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ydat_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.SymbolBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .natashapb.SymbolLine yDat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ydat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.SymbolBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.SymbolBlock)
  return false;
#undef DO_
}

void SymbolBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.SymbolBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.SymbolLine yDat = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ydat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->ydat(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.SymbolBlock)
}

::google::protobuf::uint8* SymbolBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.SymbolBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.SymbolLine yDat = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ydat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ydat(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.SymbolBlock)
  return target;
}

size_t SymbolBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.SymbolBlock)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.SymbolLine yDat = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ydat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ydat(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.SymbolBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.SymbolBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.SymbolBlock)
    MergeFrom(*source);
  }
}

void SymbolBlock::MergeFrom(const SymbolBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.SymbolBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ydat_.MergeFrom(from.ydat_);
}

void SymbolBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.SymbolBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolBlock::CopyFrom(const SymbolBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.SymbolBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolBlock::IsInitialized() const {
  return true;
}

void SymbolBlock::Swap(SymbolBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolBlock::InternalSwap(SymbolBlock* other) {
  using std::swap;
  CastToBase(&ydat_)->InternalSwap(CastToBase(&other->ydat_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolBlock::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolBlock3X5::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolBlock3X5::kDat00FieldNumber;
const int SymbolBlock3X5::kDat01FieldNumber;
const int SymbolBlock3X5::kDat02FieldNumber;
const int SymbolBlock3X5::kDat03FieldNumber;
const int SymbolBlock3X5::kDat04FieldNumber;
const int SymbolBlock3X5::kDat10FieldNumber;
const int SymbolBlock3X5::kDat11FieldNumber;
const int SymbolBlock3X5::kDat12FieldNumber;
const int SymbolBlock3X5::kDat13FieldNumber;
const int SymbolBlock3X5::kDat14FieldNumber;
const int SymbolBlock3X5::kDat20FieldNumber;
const int SymbolBlock3X5::kDat21FieldNumber;
const int SymbolBlock3X5::kDat22FieldNumber;
const int SymbolBlock3X5::kDat23FieldNumber;
const int SymbolBlock3X5::kDat24FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolBlock3X5::SymbolBlock3X5()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsSymbolBlock3X5();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.SymbolBlock3X5)
}
SymbolBlock3X5::SymbolBlock3X5(const SymbolBlock3X5& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dat0_0_, &from.dat0_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&dat2_4_) -
    reinterpret_cast<char*>(&dat0_0_)) + sizeof(dat2_4_));
  // @@protoc_insertion_point(copy_constructor:natashapb.SymbolBlock3X5)
}

void SymbolBlock3X5::SharedCtor() {
  ::memset(&dat0_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dat2_4_) -
      reinterpret_cast<char*>(&dat0_0_)) + sizeof(dat2_4_));
  _cached_size_ = 0;
}

SymbolBlock3X5::~SymbolBlock3X5() {
  // @@protoc_insertion_point(destructor:natashapb.SymbolBlock3X5)
  SharedDtor();
}

void SymbolBlock3X5::SharedDtor() {
}

void SymbolBlock3X5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolBlock3X5::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolBlock3X5& SymbolBlock3X5::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsSymbolBlock3X5();
  return *internal_default_instance();
}


void SymbolBlock3X5::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.SymbolBlock3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dat0_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dat2_4_) -
      reinterpret_cast<char*>(&dat0_0_)) + sizeof(dat2_4_));
  _internal_metadata_.Clear();
}

bool SymbolBlock3X5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.SymbolBlock3X5)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 dat0_0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat0_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat0_1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat0_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat0_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat0_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat0_3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat0_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat0_4 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat0_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat1_0 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat1_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat1_1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat1_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat1_2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat1_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat1_3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat1_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat1_4 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat1_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat2_0 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat2_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat2_1 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat2_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat2_2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat2_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat2_3 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat2_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat2_4 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat2_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.SymbolBlock3X5)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.SymbolBlock3X5)
  return false;
#undef DO_
}

void SymbolBlock3X5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.SymbolBlock3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dat0_0 = 1;
  if (this->dat0_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dat0_0(), output);
  }

  // int32 dat0_1 = 2;
  if (this->dat0_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dat0_1(), output);
  }

  // int32 dat0_2 = 3;
  if (this->dat0_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dat0_2(), output);
  }

  // int32 dat0_3 = 4;
  if (this->dat0_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dat0_3(), output);
  }

  // int32 dat0_4 = 5;
  if (this->dat0_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dat0_4(), output);
  }

  // int32 dat1_0 = 6;
  if (this->dat1_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dat1_0(), output);
  }

  // int32 dat1_1 = 7;
  if (this->dat1_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dat1_1(), output);
  }

  // int32 dat1_2 = 8;
  if (this->dat1_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dat1_2(), output);
  }

  // int32 dat1_3 = 9;
  if (this->dat1_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dat1_3(), output);
  }

  // int32 dat1_4 = 10;
  if (this->dat1_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dat1_4(), output);
  }

  // int32 dat2_0 = 11;
  if (this->dat2_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dat2_0(), output);
  }

  // int32 dat2_1 = 12;
  if (this->dat2_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dat2_1(), output);
  }

  // int32 dat2_2 = 13;
  if (this->dat2_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dat2_2(), output);
  }

  // int32 dat2_3 = 14;
  if (this->dat2_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->dat2_3(), output);
  }

  // int32 dat2_4 = 15;
  if (this->dat2_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->dat2_4(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.SymbolBlock3X5)
}

::google::protobuf::uint8* SymbolBlock3X5::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.SymbolBlock3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dat0_0 = 1;
  if (this->dat0_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dat0_0(), target);
  }

  // int32 dat0_1 = 2;
  if (this->dat0_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dat0_1(), target);
  }

  // int32 dat0_2 = 3;
  if (this->dat0_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dat0_2(), target);
  }

  // int32 dat0_3 = 4;
  if (this->dat0_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dat0_3(), target);
  }

  // int32 dat0_4 = 5;
  if (this->dat0_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dat0_4(), target);
  }

  // int32 dat1_0 = 6;
  if (this->dat1_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dat1_0(), target);
  }

  // int32 dat1_1 = 7;
  if (this->dat1_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dat1_1(), target);
  }

  // int32 dat1_2 = 8;
  if (this->dat1_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dat1_2(), target);
  }

  // int32 dat1_3 = 9;
  if (this->dat1_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dat1_3(), target);
  }

  // int32 dat1_4 = 10;
  if (this->dat1_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dat1_4(), target);
  }

  // int32 dat2_0 = 11;
  if (this->dat2_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dat2_0(), target);
  }

  // int32 dat2_1 = 12;
  if (this->dat2_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dat2_1(), target);
  }

  // int32 dat2_2 = 13;
  if (this->dat2_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dat2_2(), target);
  }

  // int32 dat2_3 = 14;
  if (this->dat2_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->dat2_3(), target);
  }

  // int32 dat2_4 = 15;
  if (this->dat2_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->dat2_4(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.SymbolBlock3X5)
  return target;
}

size_t SymbolBlock3X5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.SymbolBlock3X5)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 dat0_0 = 1;
  if (this->dat0_0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat0_0());
  }

  // int32 dat0_1 = 2;
  if (this->dat0_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat0_1());
  }

  // int32 dat0_2 = 3;
  if (this->dat0_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat0_2());
  }

  // int32 dat0_3 = 4;
  if (this->dat0_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat0_3());
  }

  // int32 dat0_4 = 5;
  if (this->dat0_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat0_4());
  }

  // int32 dat1_0 = 6;
  if (this->dat1_0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat1_0());
  }

  // int32 dat1_1 = 7;
  if (this->dat1_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat1_1());
  }

  // int32 dat1_2 = 8;
  if (this->dat1_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat1_2());
  }

  // int32 dat1_3 = 9;
  if (this->dat1_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat1_3());
  }

  // int32 dat1_4 = 10;
  if (this->dat1_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat1_4());
  }

  // int32 dat2_0 = 11;
  if (this->dat2_0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat2_0());
  }

  // int32 dat2_1 = 12;
  if (this->dat2_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat2_1());
  }

  // int32 dat2_2 = 13;
  if (this->dat2_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat2_2());
  }

  // int32 dat2_3 = 14;
  if (this->dat2_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat2_3());
  }

  // int32 dat2_4 = 15;
  if (this->dat2_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat2_4());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolBlock3X5::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.SymbolBlock3X5)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolBlock3X5* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolBlock3X5>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.SymbolBlock3X5)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.SymbolBlock3X5)
    MergeFrom(*source);
  }
}

void SymbolBlock3X5::MergeFrom(const SymbolBlock3X5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.SymbolBlock3X5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dat0_0() != 0) {
    set_dat0_0(from.dat0_0());
  }
  if (from.dat0_1() != 0) {
    set_dat0_1(from.dat0_1());
  }
  if (from.dat0_2() != 0) {
    set_dat0_2(from.dat0_2());
  }
  if (from.dat0_3() != 0) {
    set_dat0_3(from.dat0_3());
  }
  if (from.dat0_4() != 0) {
    set_dat0_4(from.dat0_4());
  }
  if (from.dat1_0() != 0) {
    set_dat1_0(from.dat1_0());
  }
  if (from.dat1_1() != 0) {
    set_dat1_1(from.dat1_1());
  }
  if (from.dat1_2() != 0) {
    set_dat1_2(from.dat1_2());
  }
  if (from.dat1_3() != 0) {
    set_dat1_3(from.dat1_3());
  }
  if (from.dat1_4() != 0) {
    set_dat1_4(from.dat1_4());
  }
  if (from.dat2_0() != 0) {
    set_dat2_0(from.dat2_0());
  }
  if (from.dat2_1() != 0) {
    set_dat2_1(from.dat2_1());
  }
  if (from.dat2_2() != 0) {
    set_dat2_2(from.dat2_2());
  }
  if (from.dat2_3() != 0) {
    set_dat2_3(from.dat2_3());
  }
  if (from.dat2_4() != 0) {
    set_dat2_4(from.dat2_4());
  }
}

void SymbolBlock3X5::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.SymbolBlock3X5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolBlock3X5::CopyFrom(const SymbolBlock3X5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.SymbolBlock3X5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolBlock3X5::IsInitialized() const {
  return true;
}

void SymbolBlock3X5::Swap(SymbolBlock3X5* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolBlock3X5::InternalSwap(SymbolBlock3X5* other) {
  using std::swap;
  swap(dat0_0_, other->dat0_0_);
  swap(dat0_1_, other->dat0_1_);
  swap(dat0_2_, other->dat0_2_);
  swap(dat0_3_, other->dat0_3_);
  swap(dat0_4_, other->dat0_4_);
  swap(dat1_0_, other->dat1_0_);
  swap(dat1_1_, other->dat1_1_);
  swap(dat1_2_, other->dat1_2_);
  swap(dat1_3_, other->dat1_3_);
  swap(dat1_4_, other->dat1_4_);
  swap(dat2_0_, other->dat2_0_);
  swap(dat2_1_, other->dat2_1_);
  swap(dat2_2_, other->dat2_2_);
  swap(dat2_3_, other->dat2_3_);
  swap(dat2_4_, other->dat2_4_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolBlock3X5::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RandomResult::InitAsDefaultInstance() {
  ::natashapb::_RandomResult_default_instance_._instance.get_mutable()->info_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void RandomResult::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomResult::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomResult::RandomResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsRandomResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.RandomResult)
}
RandomResult::RandomResult(const RandomResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::google::protobuf::Any(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:natashapb.RandomResult)
}

void RandomResult::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

RandomResult::~RandomResult() {
  // @@protoc_insertion_point(destructor:natashapb.RandomResult)
  SharedDtor();
}

void RandomResult::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void RandomResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomResult::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomResult& RandomResult::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsRandomResult();
  return *internal_default_instance();
}


void RandomResult::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.RandomResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool RandomResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.RandomResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Any info = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.RandomResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.RandomResult)
  return false;
#undef DO_
}

void RandomResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.RandomResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any info = 100;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.RandomResult)
}

::google::protobuf::uint8* RandomResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.RandomResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any info = 100;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, *info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.RandomResult)
  return target;
}

size_t RandomResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.RandomResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Any info = 100;
  if (this->has_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.RandomResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.RandomResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.RandomResult)
    MergeFrom(*source);
  }
}

void RandomResult::MergeFrom(const RandomResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.RandomResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::google::protobuf::Any::MergeFrom(from.info());
  }
}

void RandomResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.RandomResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomResult::CopyFrom(const RandomResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.RandomResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomResult::IsInitialized() const {
  return true;
}

void RandomResult::Swap(RandomResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomResult::InternalSwap(RandomResult* other) {
  using std::swap;
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomResult::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticCascadingRandomResult3X5::InitAsDefaultInstance() {
  ::natashapb::_StaticCascadingRandomResult3X5_default_instance_._instance.get_mutable()->sb3x5_ = const_cast< ::natashapb::SymbolBlock3X5*>(
      ::natashapb::SymbolBlock3X5::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticCascadingRandomResult3X5::kReelsIndexFieldNumber;
const int StaticCascadingRandomResult3X5::kDownNumsFieldNumber;
const int StaticCascadingRandomResult3X5::kSb3X5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticCascadingRandomResult3X5::StaticCascadingRandomResult3X5()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsStaticCascadingRandomResult3X5();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.StaticCascadingRandomResult3X5)
}
StaticCascadingRandomResult3X5::StaticCascadingRandomResult3X5(const StaticCascadingRandomResult3X5& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sb3x5()) {
    sb3x5_ = new ::natashapb::SymbolBlock3X5(*from.sb3x5_);
  } else {
    sb3x5_ = NULL;
  }
  ::memcpy(&reelsindex_, &from.reelsindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&downnums_) -
    reinterpret_cast<char*>(&reelsindex_)) + sizeof(downnums_));
  // @@protoc_insertion_point(copy_constructor:natashapb.StaticCascadingRandomResult3X5)
}

void StaticCascadingRandomResult3X5::SharedCtor() {
  ::memset(&sb3x5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downnums_) -
      reinterpret_cast<char*>(&sb3x5_)) + sizeof(downnums_));
  _cached_size_ = 0;
}

StaticCascadingRandomResult3X5::~StaticCascadingRandomResult3X5() {
  // @@protoc_insertion_point(destructor:natashapb.StaticCascadingRandomResult3X5)
  SharedDtor();
}

void StaticCascadingRandomResult3X5::SharedDtor() {
  if (this != internal_default_instance()) delete sb3x5_;
}

void StaticCascadingRandomResult3X5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticCascadingRandomResult3X5::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticCascadingRandomResult3X5& StaticCascadingRandomResult3X5::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsStaticCascadingRandomResult3X5();
  return *internal_default_instance();
}


void StaticCascadingRandomResult3X5::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.StaticCascadingRandomResult3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sb3x5_ != NULL) {
    delete sb3x5_;
  }
  sb3x5_ = NULL;
  ::memset(&reelsindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downnums_) -
      reinterpret_cast<char*>(&reelsindex_)) + sizeof(downnums_));
  _internal_metadata_.Clear();
}

bool StaticCascadingRandomResult3X5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.StaticCascadingRandomResult3X5)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 reelsIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reelsindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 downNums = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.SymbolBlock3X5 sb3x5 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sb3x5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.StaticCascadingRandomResult3X5)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.StaticCascadingRandomResult3X5)
  return false;
#undef DO_
}

void StaticCascadingRandomResult3X5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.StaticCascadingRandomResult3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reelsIndex = 1;
  if (this->reelsindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reelsindex(), output);
  }

  // int32 downNums = 2;
  if (this->downnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->downnums(), output);
  }

  // .natashapb.SymbolBlock3X5 sb3x5 = 3;
  if (this->has_sb3x5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *sb3x5_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.StaticCascadingRandomResult3X5)
}

::google::protobuf::uint8* StaticCascadingRandomResult3X5::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.StaticCascadingRandomResult3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reelsIndex = 1;
  if (this->reelsindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reelsindex(), target);
  }

  // int32 downNums = 2;
  if (this->downnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->downnums(), target);
  }

  // .natashapb.SymbolBlock3X5 sb3x5 = 3;
  if (this->has_sb3x5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *sb3x5_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.StaticCascadingRandomResult3X5)
  return target;
}

size_t StaticCascadingRandomResult3X5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.StaticCascadingRandomResult3X5)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .natashapb.SymbolBlock3X5 sb3x5 = 3;
  if (this->has_sb3x5()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sb3x5_);
  }

  // int32 reelsIndex = 1;
  if (this->reelsindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reelsindex());
  }

  // int32 downNums = 2;
  if (this->downnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->downnums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticCascadingRandomResult3X5::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.StaticCascadingRandomResult3X5)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticCascadingRandomResult3X5* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticCascadingRandomResult3X5>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.StaticCascadingRandomResult3X5)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.StaticCascadingRandomResult3X5)
    MergeFrom(*source);
  }
}

void StaticCascadingRandomResult3X5::MergeFrom(const StaticCascadingRandomResult3X5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.StaticCascadingRandomResult3X5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sb3x5()) {
    mutable_sb3x5()->::natashapb::SymbolBlock3X5::MergeFrom(from.sb3x5());
  }
  if (from.reelsindex() != 0) {
    set_reelsindex(from.reelsindex());
  }
  if (from.downnums() != 0) {
    set_downnums(from.downnums());
  }
}

void StaticCascadingRandomResult3X5::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.StaticCascadingRandomResult3X5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticCascadingRandomResult3X5::CopyFrom(const StaticCascadingRandomResult3X5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.StaticCascadingRandomResult3X5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticCascadingRandomResult3X5::IsInitialized() const {
  return true;
}

void StaticCascadingRandomResult3X5::Swap(StaticCascadingRandomResult3X5* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticCascadingRandomResult3X5::InternalSwap(StaticCascadingRandomResult3X5* other) {
  using std::swap;
  swap(sb3x5_, other->sb3x5_);
  swap(reelsindex_, other->reelsindex_);
  swap(downnums_, other->downnums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticCascadingRandomResult3X5::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Position2D::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position2D::kXFieldNumber;
const int Position2D::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position2D::Position2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsPosition2D();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.Position2D)
}
Position2D::Position2D(const Position2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:natashapb.Position2D)
}

void Position2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

Position2D::~Position2D() {
  // @@protoc_insertion_point(destructor:natashapb.Position2D)
  SharedDtor();
}

void Position2D::SharedDtor() {
}

void Position2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position2D::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Position2D& Position2D::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsPosition2D();
  return *internal_default_instance();
}


void Position2D::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.Position2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Position2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.Position2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.Position2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.Position2D)
  return false;
#undef DO_
}

void Position2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.Position2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.Position2D)
}

::google::protobuf::uint8* Position2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.Position2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.Position2D)
  return target;
}

size_t Position2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.Position2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.Position2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Position2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.Position2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.Position2D)
    MergeFrom(*source);
  }
}

void Position2D::MergeFrom(const Position2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.Position2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Position2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.Position2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position2D::CopyFrom(const Position2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.Position2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position2D::IsInitialized() const {
  return true;
}

void Position2D::Swap(Position2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position2D::InternalSwap(Position2D* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position2D::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameResultInfo::InitAsDefaultInstance() {
  ::natashapb::_GameResultInfo_default_instance_._instance.get_mutable()->exdat_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void GameResultInfo::clear_exdat() {
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameResultInfo::kTypeGameResultFieldNumber;
const int GameResultInfo::kLstPosFieldNumber;
const int GameResultInfo::kSymbolFieldNumber;
const int GameResultInfo::kLstSymbolFieldNumber;
const int GameResultInfo::kWinFieldNumber;
const int GameResultInfo::kRealWinFieldNumber;
const int GameResultInfo::kMulFieldNumber;
const int GameResultInfo::kPrizeFieldNumber;
const int GameResultInfo::kExDatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameResultInfo::GameResultInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameResultInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameResultInfo)
}
GameResultInfo::GameResultInfo(const GameResultInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lstpos_(from.lstpos_),
      lstsymbol_(from.lstsymbol_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exdat()) {
    exdat_ = new ::google::protobuf::Any(*from.exdat_);
  } else {
    exdat_ = NULL;
  }
  ::memcpy(&typegameresult_, &from.typegameresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&prize_) -
    reinterpret_cast<char*>(&typegameresult_)) + sizeof(prize_));
  // @@protoc_insertion_point(copy_constructor:natashapb.GameResultInfo)
}

void GameResultInfo::SharedCtor() {
  ::memset(&exdat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prize_) -
      reinterpret_cast<char*>(&exdat_)) + sizeof(prize_));
  _cached_size_ = 0;
}

GameResultInfo::~GameResultInfo() {
  // @@protoc_insertion_point(destructor:natashapb.GameResultInfo)
  SharedDtor();
}

void GameResultInfo::SharedDtor() {
  if (this != internal_default_instance()) delete exdat_;
}

void GameResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResultInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameResultInfo& GameResultInfo::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameResultInfo();
  return *internal_default_instance();
}


void GameResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lstpos_.Clear();
  lstsymbol_.Clear();
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
  ::memset(&typegameresult_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prize_) -
      reinterpret_cast<char*>(&typegameresult_)) + sizeof(prize_));
  _internal_metadata_.Clear();
}

bool GameResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameResultInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .natashapb.GAMERESULTTYPE typeGameResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_typegameresult(static_cast< ::natashapb::GAMERESULTTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .natashapb.Position2D lstPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lstpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symbol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 lstSymbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstsymbol())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_lstsymbol())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 win = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realWin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mul = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 prize = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any exDat = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exdat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameResultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameResultInfo)
  return false;
#undef DO_
}

void GameResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.GAMERESULTTYPE typeGameResult = 1;
  if (this->typegameresult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typegameresult(), output);
  }

  // repeated .natashapb.Position2D lstPos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lstpos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lstpos(static_cast<int>(i)),
      output);
  }

  // int32 symbol = 3;
  if (this->symbol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->symbol(), output);
  }

  // repeated int32 lstSymbol = 4;
  if (this->lstsymbol_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _lstsymbol_cached_byte_size_));
  }
  for (int i = 0, n = this->lstsymbol_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->lstsymbol(i), output);
  }

  // int64 win = 5;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->win(), output);
  }

  // int64 realWin = 6;
  if (this->realwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->realwin(), output);
  }

  // int64 mul = 7;
  if (this->mul() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->mul(), output);
  }

  // int64 prize = 8;
  if (this->prize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->prize(), output);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *exdat_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameResultInfo)
}

::google::protobuf::uint8* GameResultInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.GAMERESULTTYPE typeGameResult = 1;
  if (this->typegameresult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typegameresult(), target);
  }

  // repeated .natashapb.Position2D lstPos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lstpos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lstpos(static_cast<int>(i)), deterministic, target);
  }

  // int32 symbol = 3;
  if (this->symbol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->symbol(), target);
  }

  // repeated int32 lstSymbol = 4;
  if (this->lstsymbol_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _lstsymbol_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->lstsymbol_, target);
  }

  // int64 win = 5;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->win(), target);
  }

  // int64 realWin = 6;
  if (this->realwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->realwin(), target);
  }

  // int64 mul = 7;
  if (this->mul() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->mul(), target);
  }

  // int64 prize = 8;
  if (this->prize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->prize(), target);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, *exdat_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameResultInfo)
  return target;
}

size_t GameResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameResultInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.Position2D lstPos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lstpos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lstpos(static_cast<int>(i)));
    }
  }

  // repeated int32 lstSymbol = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->lstsymbol_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lstsymbol_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exdat_);
  }

  // .natashapb.GAMERESULTTYPE typeGameResult = 1;
  if (this->typegameresult() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->typegameresult());
  }

  // int32 symbol = 3;
  if (this->symbol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->symbol());
  }

  // int64 win = 5;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->win());
  }

  // int64 realWin = 6;
  if (this->realwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realwin());
  }

  // int64 mul = 7;
  if (this->mul() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mul());
  }

  // int64 prize = 8;
  if (this->prize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResultInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameResultInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameResultInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameResultInfo)
    MergeFrom(*source);
  }
}

void GameResultInfo::MergeFrom(const GameResultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lstpos_.MergeFrom(from.lstpos_);
  lstsymbol_.MergeFrom(from.lstsymbol_);
  if (from.has_exdat()) {
    mutable_exdat()->::google::protobuf::Any::MergeFrom(from.exdat());
  }
  if (from.typegameresult() != 0) {
    set_typegameresult(from.typegameresult());
  }
  if (from.symbol() != 0) {
    set_symbol(from.symbol());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.realwin() != 0) {
    set_realwin(from.realwin());
  }
  if (from.mul() != 0) {
    set_mul(from.mul());
  }
  if (from.prize() != 0) {
    set_prize(from.prize());
  }
}

void GameResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResultInfo::CopyFrom(const GameResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResultInfo::IsInitialized() const {
  return true;
}

void GameResultInfo::Swap(GameResultInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameResultInfo::InternalSwap(GameResultInfo* other) {
  using std::swap;
  CastToBase(&lstpos_)->InternalSwap(CastToBase(&other->lstpos_));
  lstsymbol_.InternalSwap(&other->lstsymbol_);
  swap(exdat_, other->exdat_);
  swap(typegameresult_, other->typegameresult_);
  swap(symbol_, other->symbol_);
  swap(win_, other->win_);
  swap(realwin_, other->realwin_);
  swap(mul_, other->mul_);
  swap(prize_, other->prize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameResultInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpinResult::InitAsDefaultInstance() {
  ::natashapb::_SpinResult_default_instance_._instance.get_mutable()->exdat_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void SpinResult::clear_exdat() {
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpinResult::kWinFieldNumber;
const int SpinResult::kRealWinFieldNumber;
const int SpinResult::kLstGRIFieldNumber;
const int SpinResult::kFgNumsFieldNumber;
const int SpinResult::kInFGFieldNumber;
const int SpinResult::kInBonusFieldNumber;
const int SpinResult::kInJackpotFieldNumber;
const int SpinResult::kInCommonJackpotFieldNumber;
const int SpinResult::kInRespinFieldNumber;
const int SpinResult::kExDatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpinResult::SpinResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsSpinResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.SpinResult)
}
SpinResult::SpinResult(const SpinResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lstgri_(from.lstgri_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exdat()) {
    exdat_ = new ::google::protobuf::Any(*from.exdat_);
  } else {
    exdat_ = NULL;
  }
  ::memcpy(&win_, &from.win_,
    static_cast<size_t>(reinterpret_cast<char*>(&inrespin_) -
    reinterpret_cast<char*>(&win_)) + sizeof(inrespin_));
  // @@protoc_insertion_point(copy_constructor:natashapb.SpinResult)
}

void SpinResult::SharedCtor() {
  ::memset(&exdat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inrespin_) -
      reinterpret_cast<char*>(&exdat_)) + sizeof(inrespin_));
  _cached_size_ = 0;
}

SpinResult::~SpinResult() {
  // @@protoc_insertion_point(destructor:natashapb.SpinResult)
  SharedDtor();
}

void SpinResult::SharedDtor() {
  if (this != internal_default_instance()) delete exdat_;
}

void SpinResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpinResult::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpinResult& SpinResult::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsSpinResult();
  return *internal_default_instance();
}


void SpinResult::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.SpinResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lstgri_.Clear();
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
  ::memset(&win_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inrespin_) -
      reinterpret_cast<char*>(&win_)) + sizeof(inrespin_));
  _internal_metadata_.Clear();
}

bool SpinResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.SpinResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 win = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realWin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .natashapb.GameResultInfo lstGRI = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lstgri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fgNums = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fgnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inFG = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inBonus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inbonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inJackpot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &injackpot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inCommonJackpot = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incommonjackpot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inRespin = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inrespin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any exDat = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exdat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.SpinResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.SpinResult)
  return false;
#undef DO_
}

void SpinResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.SpinResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 win = 1;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->win(), output);
  }

  // int64 realWin = 2;
  if (this->realwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->realwin(), output);
  }

  // repeated .natashapb.GameResultInfo lstGRI = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lstgri_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->lstgri(static_cast<int>(i)),
      output);
  }

  // int32 fgNums = 4;
  if (this->fgnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fgnums(), output);
  }

  // bool inFG = 5;
  if (this->infg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->infg(), output);
  }

  // bool inBonus = 6;
  if (this->inbonus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->inbonus(), output);
  }

  // bool inJackpot = 7;
  if (this->injackpot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->injackpot(), output);
  }

  // bool inCommonJackpot = 8;
  if (this->incommonjackpot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->incommonjackpot(), output);
  }

  // bool inRespin = 9;
  if (this->inrespin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->inrespin(), output);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *exdat_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.SpinResult)
}

::google::protobuf::uint8* SpinResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.SpinResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 win = 1;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->win(), target);
  }

  // int64 realWin = 2;
  if (this->realwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->realwin(), target);
  }

  // repeated .natashapb.GameResultInfo lstGRI = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lstgri_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lstgri(static_cast<int>(i)), deterministic, target);
  }

  // int32 fgNums = 4;
  if (this->fgnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fgnums(), target);
  }

  // bool inFG = 5;
  if (this->infg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->infg(), target);
  }

  // bool inBonus = 6;
  if (this->inbonus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->inbonus(), target);
  }

  // bool inJackpot = 7;
  if (this->injackpot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->injackpot(), target);
  }

  // bool inCommonJackpot = 8;
  if (this->incommonjackpot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->incommonjackpot(), target);
  }

  // bool inRespin = 9;
  if (this->inrespin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->inrespin(), target);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, *exdat_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.SpinResult)
  return target;
}

size_t SpinResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.SpinResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.GameResultInfo lstGRI = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lstgri_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lstgri(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exdat_);
  }

  // int64 win = 1;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->win());
  }

  // int64 realWin = 2;
  if (this->realwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realwin());
  }

  // int32 fgNums = 4;
  if (this->fgnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fgnums());
  }

  // bool inFG = 5;
  if (this->infg() != 0) {
    total_size += 1 + 1;
  }

  // bool inBonus = 6;
  if (this->inbonus() != 0) {
    total_size += 1 + 1;
  }

  // bool inJackpot = 7;
  if (this->injackpot() != 0) {
    total_size += 1 + 1;
  }

  // bool inCommonJackpot = 8;
  if (this->incommonjackpot() != 0) {
    total_size += 1 + 1;
  }

  // bool inRespin = 9;
  if (this->inrespin() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpinResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.SpinResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpinResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpinResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.SpinResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.SpinResult)
    MergeFrom(*source);
  }
}

void SpinResult::MergeFrom(const SpinResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.SpinResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lstgri_.MergeFrom(from.lstgri_);
  if (from.has_exdat()) {
    mutable_exdat()->::google::protobuf::Any::MergeFrom(from.exdat());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.realwin() != 0) {
    set_realwin(from.realwin());
  }
  if (from.fgnums() != 0) {
    set_fgnums(from.fgnums());
  }
  if (from.infg() != 0) {
    set_infg(from.infg());
  }
  if (from.inbonus() != 0) {
    set_inbonus(from.inbonus());
  }
  if (from.injackpot() != 0) {
    set_injackpot(from.injackpot());
  }
  if (from.incommonjackpot() != 0) {
    set_incommonjackpot(from.incommonjackpot());
  }
  if (from.inrespin() != 0) {
    set_inrespin(from.inrespin());
  }
}

void SpinResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.SpinResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpinResult::CopyFrom(const SpinResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.SpinResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpinResult::IsInitialized() const {
  return true;
}

void SpinResult::Swap(SpinResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpinResult::InternalSwap(SpinResult* other) {
  using std::swap;
  CastToBase(&lstgri_)->InternalSwap(CastToBase(&other->lstgri_));
  swap(exdat_, other->exdat_);
  swap(win_, other->win_);
  swap(realwin_, other->realwin_);
  swap(fgnums_, other->fgnums_);
  swap(infg_, other->infg_);
  swap(inbonus_, other->inbonus_);
  swap(injackpot_, other->injackpot_);
  swap(incommonjackpot_, other->incommonjackpot_);
  swap(inrespin_, other->inrespin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpinResult::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCtrlID::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCtrlID::kCtrlIDFieldNumber;
const int GameCtrlID::kBaseIDFieldNumber;
const int GameCtrlID::kParentIDFieldNumber;
const int GameCtrlID::kGameModFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCtrlID::GameCtrlID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameCtrlID();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameCtrlID)
}
GameCtrlID::GameCtrlID(const GameCtrlID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ctrlid_, &from.ctrlid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamemod_) -
    reinterpret_cast<char*>(&ctrlid_)) + sizeof(gamemod_));
  // @@protoc_insertion_point(copy_constructor:natashapb.GameCtrlID)
}

void GameCtrlID::SharedCtor() {
  ::memset(&ctrlid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamemod_) -
      reinterpret_cast<char*>(&ctrlid_)) + sizeof(gamemod_));
  _cached_size_ = 0;
}

GameCtrlID::~GameCtrlID() {
  // @@protoc_insertion_point(destructor:natashapb.GameCtrlID)
  SharedDtor();
}

void GameCtrlID::SharedDtor() {
}

void GameCtrlID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCtrlID::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCtrlID& GameCtrlID::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameCtrlID();
  return *internal_default_instance();
}


void GameCtrlID::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameCtrlID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ctrlid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamemod_) -
      reinterpret_cast<char*>(&ctrlid_)) + sizeof(gamemod_));
  _internal_metadata_.Clear();
}

bool GameCtrlID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameCtrlID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ctrlID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctrlid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 baseID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &baseid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 parentID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GAMEMODTYPE gameMod = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gamemod(static_cast< ::natashapb::GAMEMODTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameCtrlID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameCtrlID)
  return false;
#undef DO_
}

void GameCtrlID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameCtrlID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ctrlID = 1;
  if (this->ctrlid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ctrlid(), output);
  }

  // int64 baseID = 2;
  if (this->baseid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->baseid(), output);
  }

  // int64 parentID = 3;
  if (this->parentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->parentid(), output);
  }

  // .natashapb.GAMEMODTYPE gameMod = 4;
  if (this->gamemod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gamemod(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameCtrlID)
}

::google::protobuf::uint8* GameCtrlID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameCtrlID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ctrlID = 1;
  if (this->ctrlid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ctrlid(), target);
  }

  // int64 baseID = 2;
  if (this->baseid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->baseid(), target);
  }

  // int64 parentID = 3;
  if (this->parentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->parentid(), target);
  }

  // .natashapb.GAMEMODTYPE gameMod = 4;
  if (this->gamemod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gamemod(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameCtrlID)
  return target;
}

size_t GameCtrlID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameCtrlID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 ctrlID = 1;
  if (this->ctrlid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ctrlid());
  }

  // int64 baseID = 2;
  if (this->baseid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->baseid());
  }

  // int64 parentID = 3;
  if (this->parentid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parentid());
  }

  // .natashapb.GAMEMODTYPE gameMod = 4;
  if (this->gamemod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemod());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCtrlID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameCtrlID)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCtrlID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCtrlID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameCtrlID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameCtrlID)
    MergeFrom(*source);
  }
}

void GameCtrlID::MergeFrom(const GameCtrlID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameCtrlID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ctrlid() != 0) {
    set_ctrlid(from.ctrlid());
  }
  if (from.baseid() != 0) {
    set_baseid(from.baseid());
  }
  if (from.parentid() != 0) {
    set_parentid(from.parentid());
  }
  if (from.gamemod() != 0) {
    set_gamemod(from.gamemod());
  }
}

void GameCtrlID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameCtrlID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCtrlID::CopyFrom(const GameCtrlID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameCtrlID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCtrlID::IsInitialized() const {
  return true;
}

void GameCtrlID::Swap(GameCtrlID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCtrlID::InternalSwap(GameCtrlID* other) {
  using std::swap;
  swap(ctrlid_, other->ctrlid_);
  swap(baseid_, other->baseid_);
  swap(parentid_, other->parentid_);
  swap(gamemod_, other->gamemod_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCtrlID::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BaseCascadingInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseCascadingInfo::kCurBetFieldNumber;
const int BaseCascadingInfo::kCurLinesFieldNumber;
const int BaseCascadingInfo::kCurTimesFieldNumber;
const int BaseCascadingInfo::kTurnNumsFieldNumber;
const int BaseCascadingInfo::kTurnWinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseCascadingInfo::BaseCascadingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsBaseCascadingInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.BaseCascadingInfo)
}
BaseCascadingInfo::BaseCascadingInfo(const BaseCascadingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curbet_, &from.curbet_,
    static_cast<size_t>(reinterpret_cast<char*>(&turnwin_) -
    reinterpret_cast<char*>(&curbet_)) + sizeof(turnwin_));
  // @@protoc_insertion_point(copy_constructor:natashapb.BaseCascadingInfo)
}

void BaseCascadingInfo::SharedCtor() {
  ::memset(&curbet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnwin_) -
      reinterpret_cast<char*>(&curbet_)) + sizeof(turnwin_));
  _cached_size_ = 0;
}

BaseCascadingInfo::~BaseCascadingInfo() {
  // @@protoc_insertion_point(destructor:natashapb.BaseCascadingInfo)
  SharedDtor();
}

void BaseCascadingInfo::SharedDtor() {
}

void BaseCascadingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseCascadingInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseCascadingInfo& BaseCascadingInfo::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsBaseCascadingInfo();
  return *internal_default_instance();
}


void BaseCascadingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.BaseCascadingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&curbet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnwin_) -
      reinterpret_cast<char*>(&curbet_)) + sizeof(turnwin_));
  _internal_metadata_.Clear();
}

bool BaseCascadingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.BaseCascadingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 curBet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 curLines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 curTimes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turnNums = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 turnWin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turnwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.BaseCascadingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.BaseCascadingInfo)
  return false;
#undef DO_
}

void BaseCascadingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.BaseCascadingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 curBet = 1;
  if (this->curbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curbet(), output);
  }

  // int32 curLines = 2;
  if (this->curlines() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curlines(), output);
  }

  // int32 curTimes = 3;
  if (this->curtimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curtimes(), output);
  }

  // int32 turnNums = 4;
  if (this->turnnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->turnnums(), output);
  }

  // int64 turnWin = 5;
  if (this->turnwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->turnwin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.BaseCascadingInfo)
}

::google::protobuf::uint8* BaseCascadingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.BaseCascadingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 curBet = 1;
  if (this->curbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curbet(), target);
  }

  // int32 curLines = 2;
  if (this->curlines() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curlines(), target);
  }

  // int32 curTimes = 3;
  if (this->curtimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curtimes(), target);
  }

  // int32 turnNums = 4;
  if (this->turnnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->turnnums(), target);
  }

  // int64 turnWin = 5;
  if (this->turnwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->turnwin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.BaseCascadingInfo)
  return target;
}

size_t BaseCascadingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.BaseCascadingInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 curBet = 1;
  if (this->curbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curbet());
  }

  // int32 curLines = 2;
  if (this->curlines() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curlines());
  }

  // int32 curTimes = 3;
  if (this->curtimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curtimes());
  }

  // int32 turnNums = 4;
  if (this->turnnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turnnums());
  }

  // int64 turnWin = 5;
  if (this->turnwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->turnwin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseCascadingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.BaseCascadingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseCascadingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseCascadingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.BaseCascadingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.BaseCascadingInfo)
    MergeFrom(*source);
  }
}

void BaseCascadingInfo::MergeFrom(const BaseCascadingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.BaseCascadingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curbet() != 0) {
    set_curbet(from.curbet());
  }
  if (from.curlines() != 0) {
    set_curlines(from.curlines());
  }
  if (from.curtimes() != 0) {
    set_curtimes(from.curtimes());
  }
  if (from.turnnums() != 0) {
    set_turnnums(from.turnnums());
  }
  if (from.turnwin() != 0) {
    set_turnwin(from.turnwin());
  }
}

void BaseCascadingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.BaseCascadingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseCascadingInfo::CopyFrom(const BaseCascadingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.BaseCascadingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseCascadingInfo::IsInitialized() const {
  return true;
}

void BaseCascadingInfo::Swap(BaseCascadingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseCascadingInfo::InternalSwap(BaseCascadingInfo* other) {
  using std::swap;
  swap(curbet_, other->curbet_);
  swap(curlines_, other->curlines_);
  swap(curtimes_, other->curtimes_);
  swap(turnnums_, other->turnnums_);
  swap(turnwin_, other->turnwin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseCascadingInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BaseFreeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseFreeInfo::kTotalWinFieldNumber;
const int BaseFreeInfo::kLastNumsFieldNumber;
const int BaseFreeInfo::kCurNumsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseFreeInfo::BaseFreeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsBaseFreeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.BaseFreeInfo)
}
BaseFreeInfo::BaseFreeInfo(const BaseFreeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&totalwin_, &from.totalwin_,
    static_cast<size_t>(reinterpret_cast<char*>(&curnums_) -
    reinterpret_cast<char*>(&totalwin_)) + sizeof(curnums_));
  // @@protoc_insertion_point(copy_constructor:natashapb.BaseFreeInfo)
}

void BaseFreeInfo::SharedCtor() {
  ::memset(&totalwin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curnums_) -
      reinterpret_cast<char*>(&totalwin_)) + sizeof(curnums_));
  _cached_size_ = 0;
}

BaseFreeInfo::~BaseFreeInfo() {
  // @@protoc_insertion_point(destructor:natashapb.BaseFreeInfo)
  SharedDtor();
}

void BaseFreeInfo::SharedDtor() {
}

void BaseFreeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseFreeInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseFreeInfo& BaseFreeInfo::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsBaseFreeInfo();
  return *internal_default_instance();
}


void BaseFreeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.BaseFreeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&totalwin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curnums_) -
      reinterpret_cast<char*>(&totalwin_)) + sizeof(curnums_));
  _internal_metadata_.Clear();
}

bool BaseFreeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.BaseFreeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 totalWin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastNums = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 curNums = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.BaseFreeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.BaseFreeInfo)
  return false;
#undef DO_
}

void BaseFreeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.BaseFreeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalWin = 1;
  if (this->totalwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->totalwin(), output);
  }

  // int32 lastNums = 2;
  if (this->lastnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lastnums(), output);
  }

  // int32 curNums = 3;
  if (this->curnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curnums(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.BaseFreeInfo)
}

::google::protobuf::uint8* BaseFreeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.BaseFreeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalWin = 1;
  if (this->totalwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->totalwin(), target);
  }

  // int32 lastNums = 2;
  if (this->lastnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lastnums(), target);
  }

  // int32 curNums = 3;
  if (this->curnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curnums(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.BaseFreeInfo)
  return target;
}

size_t BaseFreeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.BaseFreeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 totalWin = 1;
  if (this->totalwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalwin());
  }

  // int32 lastNums = 2;
  if (this->lastnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastnums());
  }

  // int32 curNums = 3;
  if (this->curnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curnums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseFreeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.BaseFreeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseFreeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseFreeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.BaseFreeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.BaseFreeInfo)
    MergeFrom(*source);
  }
}

void BaseFreeInfo::MergeFrom(const BaseFreeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.BaseFreeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.totalwin() != 0) {
    set_totalwin(from.totalwin());
  }
  if (from.lastnums() != 0) {
    set_lastnums(from.lastnums());
  }
  if (from.curnums() != 0) {
    set_curnums(from.curnums());
  }
}

void BaseFreeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.BaseFreeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseFreeInfo::CopyFrom(const BaseFreeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.BaseFreeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseFreeInfo::IsInitialized() const {
  return true;
}

void BaseFreeInfo::Swap(BaseFreeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseFreeInfo::InternalSwap(BaseFreeInfo* other) {
  using std::swap;
  swap(totalwin_, other->totalwin_);
  swap(lastnums_, other->lastnums_);
  swap(curnums_, other->curnums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseFreeInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespinHistory::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespinHistory::kRealWinFieldNumber;
const int RespinHistory::kWinFieldNumber;
const int RespinHistory::kMulFieldNumber;
const int RespinHistory::kIsSpecialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespinHistory::RespinHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsRespinHistory();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.RespinHistory)
}
RespinHistory::RespinHistory(const RespinHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&realwin_, &from.realwin_,
    static_cast<size_t>(reinterpret_cast<char*>(&isspecial_) -
    reinterpret_cast<char*>(&realwin_)) + sizeof(isspecial_));
  // @@protoc_insertion_point(copy_constructor:natashapb.RespinHistory)
}

void RespinHistory::SharedCtor() {
  ::memset(&realwin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isspecial_) -
      reinterpret_cast<char*>(&realwin_)) + sizeof(isspecial_));
  _cached_size_ = 0;
}

RespinHistory::~RespinHistory() {
  // @@protoc_insertion_point(destructor:natashapb.RespinHistory)
  SharedDtor();
}

void RespinHistory::SharedDtor() {
}

void RespinHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespinHistory::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespinHistory& RespinHistory::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsRespinHistory();
  return *internal_default_instance();
}


void RespinHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.RespinHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&realwin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isspecial_) -
      reinterpret_cast<char*>(&realwin_)) + sizeof(isspecial_));
  _internal_metadata_.Clear();
}

bool RespinHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.RespinHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 realWin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 win = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mul = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSpecial = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isspecial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.RespinHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.RespinHistory)
  return false;
#undef DO_
}

void RespinHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.RespinHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 realWin = 1;
  if (this->realwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->realwin(), output);
  }

  // int64 win = 2;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->win(), output);
  }

  // int32 mul = 3;
  if (this->mul() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mul(), output);
  }

  // bool isSpecial = 4;
  if (this->isspecial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isspecial(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.RespinHistory)
}

::google::protobuf::uint8* RespinHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.RespinHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 realWin = 1;
  if (this->realwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->realwin(), target);
  }

  // int64 win = 2;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->win(), target);
  }

  // int32 mul = 3;
  if (this->mul() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mul(), target);
  }

  // bool isSpecial = 4;
  if (this->isspecial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isspecial(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.RespinHistory)
  return target;
}

size_t RespinHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.RespinHistory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 realWin = 1;
  if (this->realwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realwin());
  }

  // int64 win = 2;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->win());
  }

  // int32 mul = 3;
  if (this->mul() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mul());
  }

  // bool isSpecial = 4;
  if (this->isspecial() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespinHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.RespinHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const RespinHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespinHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.RespinHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.RespinHistory)
    MergeFrom(*source);
  }
}

void RespinHistory::MergeFrom(const RespinHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.RespinHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.realwin() != 0) {
    set_realwin(from.realwin());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.mul() != 0) {
    set_mul(from.mul());
  }
  if (from.isspecial() != 0) {
    set_isspecial(from.isspecial());
  }
}

void RespinHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.RespinHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespinHistory::CopyFrom(const RespinHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.RespinHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespinHistory::IsInitialized() const {
  return true;
}

void RespinHistory::Swap(RespinHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespinHistory::InternalSwap(RespinHistory* other) {
  using std::swap;
  swap(realwin_, other->realwin_);
  swap(win_, other->win_);
  swap(mul_, other->mul_);
  swap(isspecial_, other->isspecial_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RespinHistory::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespinHistoryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespinHistoryList::kLstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespinHistoryList::RespinHistoryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsRespinHistoryList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.RespinHistoryList)
}
RespinHistoryList::RespinHistoryList(const RespinHistoryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lst_(from.lst_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:natashapb.RespinHistoryList)
}

void RespinHistoryList::SharedCtor() {
  _cached_size_ = 0;
}

RespinHistoryList::~RespinHistoryList() {
  // @@protoc_insertion_point(destructor:natashapb.RespinHistoryList)
  SharedDtor();
}

void RespinHistoryList::SharedDtor() {
}

void RespinHistoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespinHistoryList::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespinHistoryList& RespinHistoryList::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsRespinHistoryList();
  return *internal_default_instance();
}


void RespinHistoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.RespinHistoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lst_.Clear();
  _internal_metadata_.Clear();
}

bool RespinHistoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.RespinHistoryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .natashapb.RespinHistory lst = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.RespinHistoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.RespinHistoryList)
  return false;
#undef DO_
}

void RespinHistoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.RespinHistoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.RespinHistory lst = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lst_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lst(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.RespinHistoryList)
}

::google::protobuf::uint8* RespinHistoryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.RespinHistoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.RespinHistory lst = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lst_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lst(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.RespinHistoryList)
  return target;
}

size_t RespinHistoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.RespinHistoryList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.RespinHistory lst = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lst_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lst(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespinHistoryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.RespinHistoryList)
  GOOGLE_DCHECK_NE(&from, this);
  const RespinHistoryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespinHistoryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.RespinHistoryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.RespinHistoryList)
    MergeFrom(*source);
  }
}

void RespinHistoryList::MergeFrom(const RespinHistoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.RespinHistoryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lst_.MergeFrom(from.lst_);
}

void RespinHistoryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.RespinHistoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespinHistoryList::CopyFrom(const RespinHistoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.RespinHistoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespinHistoryList::IsInitialized() const {
  return true;
}

void RespinHistoryList::Swap(RespinHistoryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespinHistoryList::InternalSwap(RespinHistoryList* other) {
  using std::swap;
  CastToBase(&lst_)->InternalSwap(CastToBase(&other->lst_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RespinHistoryList::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserGameModInfo::InitAsDefaultInstance() {
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->randomresult_ = const_cast< ::natashapb::RandomResult*>(
      ::natashapb::RandomResult::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->spinresult_ = const_cast< ::natashapb::SpinResult*>(
      ::natashapb::SpinResult::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->gamectrlid_ = const_cast< ::natashapb::GameCtrlID*>(
      ::natashapb::GameCtrlID::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->cascadinginfo_ = const_cast< ::natashapb::BaseCascadingInfo*>(
      ::natashapb::BaseCascadingInfo::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->lsthistory_ = const_cast< ::natashapb::RespinHistoryList*>(
      ::natashapb::RespinHistoryList::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->freeinfo_ = const_cast< ::natashapb::BaseFreeInfo*>(
      ::natashapb::BaseFreeInfo::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->exdat_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void UserGameModInfo::clear_exdat() {
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGameModInfo::kRandomResultFieldNumber;
const int UserGameModInfo::kSpinResultFieldNumber;
const int UserGameModInfo::kGameCtrlIDFieldNumber;
const int UserGameModInfo::kCascadingInfoFieldNumber;
const int UserGameModInfo::kLstHistoryFieldNumber;
const int UserGameModInfo::kFreeInfoFieldNumber;
const int UserGameModInfo::kExDatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGameModInfo::UserGameModInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsUserGameModInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.UserGameModInfo)
}
UserGameModInfo::UserGameModInfo(const UserGameModInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_randomresult()) {
    randomresult_ = new ::natashapb::RandomResult(*from.randomresult_);
  } else {
    randomresult_ = NULL;
  }
  if (from.has_spinresult()) {
    spinresult_ = new ::natashapb::SpinResult(*from.spinresult_);
  } else {
    spinresult_ = NULL;
  }
  if (from.has_gamectrlid()) {
    gamectrlid_ = new ::natashapb::GameCtrlID(*from.gamectrlid_);
  } else {
    gamectrlid_ = NULL;
  }
  if (from.has_cascadinginfo()) {
    cascadinginfo_ = new ::natashapb::BaseCascadingInfo(*from.cascadinginfo_);
  } else {
    cascadinginfo_ = NULL;
  }
  if (from.has_lsthistory()) {
    lsthistory_ = new ::natashapb::RespinHistoryList(*from.lsthistory_);
  } else {
    lsthistory_ = NULL;
  }
  if (from.has_freeinfo()) {
    freeinfo_ = new ::natashapb::BaseFreeInfo(*from.freeinfo_);
  } else {
    freeinfo_ = NULL;
  }
  if (from.has_exdat()) {
    exdat_ = new ::google::protobuf::Any(*from.exdat_);
  } else {
    exdat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:natashapb.UserGameModInfo)
}

void UserGameModInfo::SharedCtor() {
  ::memset(&randomresult_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exdat_) -
      reinterpret_cast<char*>(&randomresult_)) + sizeof(exdat_));
  _cached_size_ = 0;
}

UserGameModInfo::~UserGameModInfo() {
  // @@protoc_insertion_point(destructor:natashapb.UserGameModInfo)
  SharedDtor();
}

void UserGameModInfo::SharedDtor() {
  if (this != internal_default_instance()) delete randomresult_;
  if (this != internal_default_instance()) delete spinresult_;
  if (this != internal_default_instance()) delete gamectrlid_;
  if (this != internal_default_instance()) delete cascadinginfo_;
  if (this != internal_default_instance()) delete lsthistory_;
  if (this != internal_default_instance()) delete freeinfo_;
  if (this != internal_default_instance()) delete exdat_;
}

void UserGameModInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGameModInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserGameModInfo& UserGameModInfo::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsUserGameModInfo();
  return *internal_default_instance();
}


void UserGameModInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.UserGameModInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && randomresult_ != NULL) {
    delete randomresult_;
  }
  randomresult_ = NULL;
  if (GetArenaNoVirtual() == NULL && spinresult_ != NULL) {
    delete spinresult_;
  }
  spinresult_ = NULL;
  if (GetArenaNoVirtual() == NULL && gamectrlid_ != NULL) {
    delete gamectrlid_;
  }
  gamectrlid_ = NULL;
  if (GetArenaNoVirtual() == NULL && cascadinginfo_ != NULL) {
    delete cascadinginfo_;
  }
  cascadinginfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && lsthistory_ != NULL) {
    delete lsthistory_;
  }
  lsthistory_ = NULL;
  if (GetArenaNoVirtual() == NULL && freeinfo_ != NULL) {
    delete freeinfo_;
  }
  freeinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
  _internal_metadata_.Clear();
}

bool UserGameModInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.UserGameModInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .natashapb.RandomResult randomResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_randomresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.SpinResult spinResult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spinresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlID gameCtrlID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamectrlid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.BaseCascadingInfo cascadingInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cascadinginfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.RespinHistoryList lstHistory = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lsthistory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.BaseFreeInfo freeInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any exDat = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exdat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.UserGameModInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.UserGameModInfo)
  return false;
#undef DO_
}

void UserGameModInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.UserGameModInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.RandomResult randomResult = 1;
  if (this->has_randomresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *randomresult_, output);
  }

  // .natashapb.SpinResult spinResult = 2;
  if (this->has_spinresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *spinresult_, output);
  }

  // .natashapb.GameCtrlID gameCtrlID = 3;
  if (this->has_gamectrlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *gamectrlid_, output);
  }

  // .natashapb.BaseCascadingInfo cascadingInfo = 4;
  if (this->has_cascadinginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *cascadinginfo_, output);
  }

  // .natashapb.RespinHistoryList lstHistory = 5;
  if (this->has_lsthistory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *lsthistory_, output);
  }

  // .natashapb.BaseFreeInfo freeInfo = 6;
  if (this->has_freeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *freeinfo_, output);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *exdat_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.UserGameModInfo)
}

::google::protobuf::uint8* UserGameModInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.UserGameModInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.RandomResult randomResult = 1;
  if (this->has_randomresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *randomresult_, deterministic, target);
  }

  // .natashapb.SpinResult spinResult = 2;
  if (this->has_spinresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *spinresult_, deterministic, target);
  }

  // .natashapb.GameCtrlID gameCtrlID = 3;
  if (this->has_gamectrlid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *gamectrlid_, deterministic, target);
  }

  // .natashapb.BaseCascadingInfo cascadingInfo = 4;
  if (this->has_cascadinginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *cascadinginfo_, deterministic, target);
  }

  // .natashapb.RespinHistoryList lstHistory = 5;
  if (this->has_lsthistory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *lsthistory_, deterministic, target);
  }

  // .natashapb.BaseFreeInfo freeInfo = 6;
  if (this->has_freeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *freeinfo_, deterministic, target);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, *exdat_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.UserGameModInfo)
  return target;
}

size_t UserGameModInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.UserGameModInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .natashapb.RandomResult randomResult = 1;
  if (this->has_randomresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *randomresult_);
  }

  // .natashapb.SpinResult spinResult = 2;
  if (this->has_spinresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spinresult_);
  }

  // .natashapb.GameCtrlID gameCtrlID = 3;
  if (this->has_gamectrlid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gamectrlid_);
  }

  // .natashapb.BaseCascadingInfo cascadingInfo = 4;
  if (this->has_cascadinginfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cascadinginfo_);
  }

  // .natashapb.RespinHistoryList lstHistory = 5;
  if (this->has_lsthistory()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lsthistory_);
  }

  // .natashapb.BaseFreeInfo freeInfo = 6;
  if (this->has_freeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *freeinfo_);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exdat_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameModInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.UserGameModInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGameModInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserGameModInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.UserGameModInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.UserGameModInfo)
    MergeFrom(*source);
  }
}

void UserGameModInfo::MergeFrom(const UserGameModInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.UserGameModInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_randomresult()) {
    mutable_randomresult()->::natashapb::RandomResult::MergeFrom(from.randomresult());
  }
  if (from.has_spinresult()) {
    mutable_spinresult()->::natashapb::SpinResult::MergeFrom(from.spinresult());
  }
  if (from.has_gamectrlid()) {
    mutable_gamectrlid()->::natashapb::GameCtrlID::MergeFrom(from.gamectrlid());
  }
  if (from.has_cascadinginfo()) {
    mutable_cascadinginfo()->::natashapb::BaseCascadingInfo::MergeFrom(from.cascadinginfo());
  }
  if (from.has_lsthistory()) {
    mutable_lsthistory()->::natashapb::RespinHistoryList::MergeFrom(from.lsthistory());
  }
  if (from.has_freeinfo()) {
    mutable_freeinfo()->::natashapb::BaseFreeInfo::MergeFrom(from.freeinfo());
  }
  if (from.has_exdat()) {
    mutable_exdat()->::google::protobuf::Any::MergeFrom(from.exdat());
  }
}

void UserGameModInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.UserGameModInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameModInfo::CopyFrom(const UserGameModInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.UserGameModInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameModInfo::IsInitialized() const {
  return true;
}

void UserGameModInfo::Swap(UserGameModInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGameModInfo::InternalSwap(UserGameModInfo* other) {
  using std::swap;
  swap(randomresult_, other->randomresult_);
  swap(spinresult_, other->spinresult_);
  swap(gamectrlid_, other->gamectrlid_);
  swap(cascadinginfo_, other->cascadinginfo_);
  swap(lsthistory_, other->lsthistory_);
  swap(freeinfo_, other->freeinfo_);
  swap(exdat_, other->exdat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserGameModInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserGameLogicInfo::InitAsDefaultInstance() {
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->basegame_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->freegame_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->bonus_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->jackpot_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->commonjackpot_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->freegame2_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGameLogicInfo::kBasegameFieldNumber;
const int UserGameLogicInfo::kFreegameFieldNumber;
const int UserGameLogicInfo::kBonusFieldNumber;
const int UserGameLogicInfo::kJackpotFieldNumber;
const int UserGameLogicInfo::kCommonjackpotFieldNumber;
const int UserGameLogicInfo::kFreegame2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGameLogicInfo::UserGameLogicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsUserGameLogicInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.UserGameLogicInfo)
}
UserGameLogicInfo::UserGameLogicInfo(const UserGameLogicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_basegame()) {
    basegame_ = new ::natashapb::UserGameModInfo(*from.basegame_);
  } else {
    basegame_ = NULL;
  }
  if (from.has_freegame()) {
    freegame_ = new ::natashapb::UserGameModInfo(*from.freegame_);
  } else {
    freegame_ = NULL;
  }
  if (from.has_bonus()) {
    bonus_ = new ::natashapb::UserGameModInfo(*from.bonus_);
  } else {
    bonus_ = NULL;
  }
  if (from.has_jackpot()) {
    jackpot_ = new ::natashapb::UserGameModInfo(*from.jackpot_);
  } else {
    jackpot_ = NULL;
  }
  if (from.has_commonjackpot()) {
    commonjackpot_ = new ::natashapb::UserGameModInfo(*from.commonjackpot_);
  } else {
    commonjackpot_ = NULL;
  }
  if (from.has_freegame2()) {
    freegame2_ = new ::natashapb::UserGameModInfo(*from.freegame2_);
  } else {
    freegame2_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:natashapb.UserGameLogicInfo)
}

void UserGameLogicInfo::SharedCtor() {
  ::memset(&basegame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freegame2_) -
      reinterpret_cast<char*>(&basegame_)) + sizeof(freegame2_));
  _cached_size_ = 0;
}

UserGameLogicInfo::~UserGameLogicInfo() {
  // @@protoc_insertion_point(destructor:natashapb.UserGameLogicInfo)
  SharedDtor();
}

void UserGameLogicInfo::SharedDtor() {
  if (this != internal_default_instance()) delete basegame_;
  if (this != internal_default_instance()) delete freegame_;
  if (this != internal_default_instance()) delete bonus_;
  if (this != internal_default_instance()) delete jackpot_;
  if (this != internal_default_instance()) delete commonjackpot_;
  if (this != internal_default_instance()) delete freegame2_;
}

void UserGameLogicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGameLogicInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserGameLogicInfo& UserGameLogicInfo::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsUserGameLogicInfo();
  return *internal_default_instance();
}


void UserGameLogicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.UserGameLogicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && basegame_ != NULL) {
    delete basegame_;
  }
  basegame_ = NULL;
  if (GetArenaNoVirtual() == NULL && freegame_ != NULL) {
    delete freegame_;
  }
  freegame_ = NULL;
  if (GetArenaNoVirtual() == NULL && bonus_ != NULL) {
    delete bonus_;
  }
  bonus_ = NULL;
  if (GetArenaNoVirtual() == NULL && jackpot_ != NULL) {
    delete jackpot_;
  }
  jackpot_ = NULL;
  if (GetArenaNoVirtual() == NULL && commonjackpot_ != NULL) {
    delete commonjackpot_;
  }
  commonjackpot_ = NULL;
  if (GetArenaNoVirtual() == NULL && freegame2_ != NULL) {
    delete freegame2_;
  }
  freegame2_ = NULL;
  _internal_metadata_.Clear();
}

bool UserGameLogicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.UserGameLogicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .natashapb.UserGameModInfo basegame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_basegame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.UserGameModInfo freegame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freegame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.UserGameModInfo bonus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bonus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.UserGameModInfo jackpot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_jackpot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.UserGameModInfo commonjackpot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commonjackpot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.UserGameModInfo freegame2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freegame2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.UserGameLogicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.UserGameLogicInfo)
  return false;
#undef DO_
}

void UserGameLogicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.UserGameLogicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.UserGameModInfo basegame = 1;
  if (this->has_basegame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *basegame_, output);
  }

  // .natashapb.UserGameModInfo freegame = 2;
  if (this->has_freegame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *freegame_, output);
  }

  // .natashapb.UserGameModInfo bonus = 3;
  if (this->has_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *bonus_, output);
  }

  // .natashapb.UserGameModInfo jackpot = 4;
  if (this->has_jackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *jackpot_, output);
  }

  // .natashapb.UserGameModInfo commonjackpot = 5;
  if (this->has_commonjackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *commonjackpot_, output);
  }

  // .natashapb.UserGameModInfo freegame2 = 6;
  if (this->has_freegame2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *freegame2_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.UserGameLogicInfo)
}

::google::protobuf::uint8* UserGameLogicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.UserGameLogicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.UserGameModInfo basegame = 1;
  if (this->has_basegame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *basegame_, deterministic, target);
  }

  // .natashapb.UserGameModInfo freegame = 2;
  if (this->has_freegame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *freegame_, deterministic, target);
  }

  // .natashapb.UserGameModInfo bonus = 3;
  if (this->has_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *bonus_, deterministic, target);
  }

  // .natashapb.UserGameModInfo jackpot = 4;
  if (this->has_jackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *jackpot_, deterministic, target);
  }

  // .natashapb.UserGameModInfo commonjackpot = 5;
  if (this->has_commonjackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *commonjackpot_, deterministic, target);
  }

  // .natashapb.UserGameModInfo freegame2 = 6;
  if (this->has_freegame2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *freegame2_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.UserGameLogicInfo)
  return target;
}

size_t UserGameLogicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.UserGameLogicInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .natashapb.UserGameModInfo basegame = 1;
  if (this->has_basegame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *basegame_);
  }

  // .natashapb.UserGameModInfo freegame = 2;
  if (this->has_freegame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *freegame_);
  }

  // .natashapb.UserGameModInfo bonus = 3;
  if (this->has_bonus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bonus_);
  }

  // .natashapb.UserGameModInfo jackpot = 4;
  if (this->has_jackpot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *jackpot_);
  }

  // .natashapb.UserGameModInfo commonjackpot = 5;
  if (this->has_commonjackpot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *commonjackpot_);
  }

  // .natashapb.UserGameModInfo freegame2 = 6;
  if (this->has_freegame2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *freegame2_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameLogicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.UserGameLogicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGameLogicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserGameLogicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.UserGameLogicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.UserGameLogicInfo)
    MergeFrom(*source);
  }
}

void UserGameLogicInfo::MergeFrom(const UserGameLogicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.UserGameLogicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basegame()) {
    mutable_basegame()->::natashapb::UserGameModInfo::MergeFrom(from.basegame());
  }
  if (from.has_freegame()) {
    mutable_freegame()->::natashapb::UserGameModInfo::MergeFrom(from.freegame());
  }
  if (from.has_bonus()) {
    mutable_bonus()->::natashapb::UserGameModInfo::MergeFrom(from.bonus());
  }
  if (from.has_jackpot()) {
    mutable_jackpot()->::natashapb::UserGameModInfo::MergeFrom(from.jackpot());
  }
  if (from.has_commonjackpot()) {
    mutable_commonjackpot()->::natashapb::UserGameModInfo::MergeFrom(from.commonjackpot());
  }
  if (from.has_freegame2()) {
    mutable_freegame2()->::natashapb::UserGameModInfo::MergeFrom(from.freegame2());
  }
}

void UserGameLogicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.UserGameLogicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameLogicInfo::CopyFrom(const UserGameLogicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.UserGameLogicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameLogicInfo::IsInitialized() const {
  return true;
}

void UserGameLogicInfo::Swap(UserGameLogicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGameLogicInfo::InternalSwap(UserGameLogicInfo* other) {
  using std::swap;
  swap(basegame_, other->basegame_);
  swap(freegame_, other->freegame_);
  swap(bonus_, other->bonus_);
  swap(jackpot_, other->jackpot_);
  swap(commonjackpot_, other->commonjackpot_);
  swap(freegame2_, other->freegame2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserGameLogicInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace natashapb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::SymbolLine* Arena::Create< ::natashapb::SymbolLine >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::SymbolLine >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::SymbolBlock* Arena::Create< ::natashapb::SymbolBlock >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::SymbolBlock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::SymbolBlock3X5* Arena::Create< ::natashapb::SymbolBlock3X5 >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::SymbolBlock3X5 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::RandomResult* Arena::Create< ::natashapb::RandomResult >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::RandomResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::StaticCascadingRandomResult3X5* Arena::Create< ::natashapb::StaticCascadingRandomResult3X5 >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::StaticCascadingRandomResult3X5 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::Position2D* Arena::Create< ::natashapb::Position2D >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::Position2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameResultInfo* Arena::Create< ::natashapb::GameResultInfo >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameResultInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::SpinResult* Arena::Create< ::natashapb::SpinResult >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::SpinResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameCtrlID* Arena::Create< ::natashapb::GameCtrlID >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameCtrlID >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::BaseCascadingInfo* Arena::Create< ::natashapb::BaseCascadingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::BaseCascadingInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::BaseFreeInfo* Arena::Create< ::natashapb::BaseFreeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::BaseFreeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::RespinHistory* Arena::Create< ::natashapb::RespinHistory >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::RespinHistory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::RespinHistoryList* Arena::Create< ::natashapb::RespinHistoryList >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::RespinHistoryList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::UserGameModInfo* Arena::Create< ::natashapb::UserGameModInfo >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::UserGameModInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::UserGameLogicInfo* Arena::Create< ::natashapb::UserGameLogicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::UserGameLogicInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
